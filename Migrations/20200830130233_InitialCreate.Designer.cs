// <auto-generated />
using System;
using AlkoBot.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AlkoBot.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200830130233_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7");

            modelBuilder.Entity("AlkoBot.Models.Cocktail", b =>
                {
                    b.Property<int>("CocktailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("CocktailId");

                    b.ToTable("Cocktails");
                });

            modelBuilder.Entity("AlkoBot.Models.FavouriteCocktail", b =>
                {
                    b.Property<int?>("CocktailId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Like")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CocktailId");

                    b.ToTable("FavouriteCocktails");
                });

            modelBuilder.Entity("AlkoBot.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MainUnitUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("IngredientId");

                    b.HasIndex("MainUnitUnitId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("AlkoBot.Models.MeasurementUnit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Coefficient")
                        .HasColumnType("REAL");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("UnitId");

                    b.HasIndex("IngredientId");

                    b.ToTable("MeasurementUnits");
                });

            modelBuilder.Entity("AlkoBot.Models.Recipe", b =>
                {
                    b.Property<int>("CocktailId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IngredientId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<int?>("MainUnitUnitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CocktailId", "IngredientId");

                    b.HasIndex("MainUnitUnitId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("AlkoBot.Models.FavouriteCocktail", b =>
                {
                    b.HasOne("AlkoBot.Models.Cocktail", "Cocktail")
                        .WithMany()
                        .HasForeignKey("CocktailId");
                });

            modelBuilder.Entity("AlkoBot.Models.Ingredient", b =>
                {
                    b.HasOne("AlkoBot.Models.MeasurementUnit", "MainUnit")
                        .WithMany()
                        .HasForeignKey("MainUnitUnitId");
                });

            modelBuilder.Entity("AlkoBot.Models.MeasurementUnit", b =>
                {
                    b.HasOne("AlkoBot.Models.Ingredient", "Ingredient")
                        .WithMany("Units")
                        .HasForeignKey("IngredientId");
                });

            modelBuilder.Entity("AlkoBot.Models.Recipe", b =>
                {
                    b.HasOne("AlkoBot.Models.MeasurementUnit", "MainUnit")
                        .WithMany()
                        .HasForeignKey("MainUnitUnitId");
                });
#pragma warning restore 612, 618
        }
    }
}
